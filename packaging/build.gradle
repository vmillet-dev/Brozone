import com.badlogicgames.packr.Packr
import com.badlogicgames.packr.PackrConfig

apply plugin: "de.undercouch.download"

def ICON_PATH = new File("$rootDir/assets/badlogic.jpg")

String getUrlByPlatform(PackrConfig.Platform platform) {
    switch (platform) {
        case PackrConfig.Platform.Windows64: return "${urlJdkWindows}"
        case PackrConfig.Platform.MacOS: return "${urlJdkMacOs}"
        case PackrConfig.Platform.Linux64: return "${urlJdkLinux}"
    }
}

tasks.register('releaseAllPlatform') {
    PackrConfig.Platform.values().each { platform ->
        if (platform == PackrConfig.Platform.Linux64) {
            return
        }
        dependsOn "zip${platform.toString()}"
    }

    dependsOn("releaseHtml")
}

tasks.register('releaseHtml', Zip) {
    dependsOn(":html:war")
    copy {
        from (project(":html").projectDir.path + "/build/libs")
        into "release/"
    }

    dependsOn(":html:dist")

    from (project(":html").projectDir.path + "/build/dist")
    include "**/*"
    archiveFileName = "${getNeatVersionString()}-js.zip"
    destinationDirectory = file(project.projectDir.path + "/release")
}

PackrConfig.Platform.values().each { platform ->
    def platformName = platform.toString()

    configurePackageTask(platform, ICON_PATH)

    tasks.named("package${platformName}") {
        finalizedBy "zip${platformName}"
    }

    tasks.register("zip${platformName}", Zip) {
        dependsOn "package${platformName}"

        from "build/output"
        include "**/*"
        archiveFileName = "${generateDesktopReleaseName(platformName)}.zip"
        destinationDirectory = file(project.projectDir.path + "/release")

        delete "build/"
    }
}

def configurePackageTask(PackrConfig.Platform platform, ICON_PATH) {
    tasks.register("package${platform.toString()}") {
        dependsOn(":desktop:dist")

        doLast {
            copy {
                into "build/"
                rename("${appName}.jar", "desktop.jar")
                from "build/libs/${appName}.jar"
            }

            delete {
                delete "build/output/"
            }

            def config = new PackrConfig()

            config.with {
                config.executable = appName
                config.platform = platform
                verbose = true
                bundleIdentifier = getPackage() + ".mac"
                iconResource = ICON_PATH
                outDir = file("build/output")
                mainClass = project(":desktop").ext.mainClassName
                classpath = [ project(":desktop").projectDir.path + "/build/libs/${getNeatVersionString()}.jar" ]
                removePlatformLibs = config.classpath

                jdk = configureJdk(platform)

                vmArgs = []
                minimizeJre = "$rootDir/packaging/packr_minimize.json".toString()

                if (platform == PackrConfig.Platform.MacOS) {
                    vmArgs += "XstartOnFirstThread"
                }
            }

            new Packr().pack(config)

            copyOutputFiles(platform)
        }
    }
}

def configureJdk(PackrConfig.Platform platform) {
    if (!activeJdkCache) {
        return getUrlByPlatform(platform)
    }

    def jdkZip = new File(project.projectDir.path + "/cache/${platform.toString().toLowerCase()}" + "/jdk.zip")
    if (!jdkZip.exists()) {
        download.run {
            src getUrlByPlatform(platform)
            dest jdkZip
            overwrite true
        }
    }

    return jdkZip.getAbsolutePath()
}

def copyOutputFiles(platform) {
    if (platform != PackrConfig.Platform.MacOS) {
        copy {
            into "build/output/jre/"
            from "build/output/desktop.jar"
        }

        delete {
            delete "build/output/desktop.jar"
        }

        file("build/output/${appName}.json").text = file("build/output/${appName}.json").text.replace("desktop.jar", "jre/desktop.jar")
    }

    if (platform == PackrConfig.Platform.MacOS) {
        copy {
            into "build/output/${appName}.app/Contents/"
            from "build/output/Contents/"
        }

        delete {
            delete "build/output/Contents/"
        }
    }

    if (platform == PackrConfig.Platform.Windows64) {
        copy {
            from "build/output/jre/bin/msvcr100.dll"
            into "build/output/"
            rename("msvcr100.dll", "MSVCR100.dll")
        }
    }

    copy {
        from "build/output"
        into "deploy/${platform.toString().toLowerCase()}"
        fileMode 755
    }
}
