apply plugin: "gwt"
apply plugin: "war"
apply plugin: "org.gretty"
apply plugin: "java-library"

eclipse.project.name = appName + "-html"

dependencies {
    implementation project(":core")

    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion:sources"
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-gwt:$gdxControllersVersion:sources"
    implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
    implementation "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
    implementation "com.google.jsinterop:jsinterop-annotations:2.0.2:sources"
}

sourceSets.main.java.srcDirs = [ "src/" ]

gwt {
    gwtVersion='2.10.0'
    maxHeapSize="1G"
    minHeapSize="1G"

    src = files(file("src/"))
    modules 'dev.vmillet.brozone.GdxDefinition'
    devModules 'dev.vmillet.brozone.GdxDefinitionSuperdev'

    compiler(({
        strict = true
        disableCastChecking = true
    } as Closure<GwtCompileOptions>))
}


import org.docstr.gradle.plugins.gwt.GwtCompileOptions
import org.docstr.gradle.plugins.gwt.GwtSuperDev
import org.akhikhl.gretty.AppBeforeIntegrationTestTask

gretty.httpPort = 8080
gretty.resourceBase = project.path + "/build/gwt/draftOut"
gretty.contextPath = "/"
gretty.portPropertiesFileName = "TEMP_PORTS.properties"

tasks.register('startHttpServer') {
    dependsOn draftCompileGwt

    doFirst {
        copy {
            from "webapp"
            into gretty.resourceBase
        }

        copy {
            from "war"
            into gretty.resourceBase
        }
    }
}

tasks.register('beforeRun', AppBeforeIntegrationTestTask) {
    dependsOn startHttpServer

    file("build/TEMP_PORTS.properties").delete()
    integrationTestTask 'superDev'

    interactive false
}

tasks.register('superDev', GwtSuperDev) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules
    }
}

tasks.register('dist') {
    dependsOn clean, compileGwt
    doLast {
        file("build/dist").mkdirs()
        copy {
            from "build/gwt/out"
            into "build/dist"
        }
        copy {
            from "webapp"
            into "build/dist"
        }
        copy {
            from "war"
            into "build/dist"
        }
    }
}

tasks.register('addSource') {
    doLast {
        sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)
    }
}

tasks.war {
    webAppDirectory.set(file("webapp"))
    archiveFileName = "${getNeatVersionString()}.war"
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)
tasks.checkGwt.dependsOn(addSource)

sonar {
    skipProject true
}